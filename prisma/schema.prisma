// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id            String   @id @default(cuid())
  name          String
  popularChoice Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  billboards Billboard[]
}

model Billboard {
  id           String   @id @default(cuid())
  address      String
  lat          Float
  lng          Float
  type         String
  countScreens Int
  width        Int
  height       Int
  photo        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  cityId       String
  city         City     @relation(fields: [cityId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role            @default(USER)
  accounts      Account[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}
